1. higher-order functions: Functions that operate on other functions,either by taking them as arguments or by returning them, are called 
   higher-order functions.
     filter() & map() & reduce()                    //return a new array
   
2. filter(): array.filter(function);      // callback function   element in array   returns array of true values
   eg: 
  var arr = [122, 90, 10, 40, 66];
  arr.filter(function(test){
	     return test>60;
   });
   //(3) [122, 90, 66]
  
3. map(): array.map(function);
   eg:
   var arr1 = [
    {name: 'tom1', age: 22},
    {name: 'tom2', age: 23},
    {name: 'tom3', age: 15}
    ];
    var ageArr = arr1.map(function(info){
	  return info.age;
    });
  ageArr;   // (3) [22, 23, 15]
  
4. reduce():  arr.reduce(callback[, initialValue])
   accumulator:
	The accumulator accumulates the callback's return values; it is the accumulated value previously returned in the last invocation of the callback, or initialValue, if supplied (see below).
   currentValue:
	The current element being processed in the array.
   currentIndexOptional:
	The index of the current element being processed in the array. Starts at index 0, if an initialValue is provided, and at index 1 otherwise.
   arrayOptional:
	The array reduce() was called upon.
eg:
	[0, 1, 2, 3, 4].reduce(function(accumulator, currentValue, currentIndex, array) {
	  return accumulator + currentValue;
	});
	

  
