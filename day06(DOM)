1. DOM: document object model

2. document.getElementById('id');
   document.querySelector('#id');
   document.querySelectorAll('.className');
   document.querySelector('tagName');
   eg:
    var title = document.getElementById('title');        //<h1 id="title">Todo Tracker</h1>
    var title2 = document.querySelector(#'title');       //<h1 id="title">Todo Tracker</h1>
    var todos = document.querySelectorAll('.todos');     // NodeList(3) [li.todos, li.todos, li.todos]
    
3.  element.innerText
    element.innerHTML
    element.textContext
    (input.value)
  
    appendChild();
    removeChild();
    createElement();
    firstChild;
    
4. addEventListener(event,function);
   eg:  
    event: 'click';
    
5. form: 
    eg:
      var formField = document.querySelector('form');
      var input = document.getElementById('user-todo');
      formField.addEventListener('submit',function(e){
        e.preventDefault();
        console.log(input.value);
      });
      
6. localstorage -> web storage that stores data with no expiration date
   methods:
      setItem();   // add a key and value to local storage
      getItem();   // retrieve a value by the key
      removeItem(); // remove an item by key
      clear(); 	// clear all storage
      
7. css selectors: 
      tag: 
         eg:  p{}
      class:
         eg:  .className{}
      id:
         eg:  #id{}

8. mobile friendly: 
	css file: @media screen and (max-width: 768px){}

9. closures:
	eg:
	function makeFunc() {
	  var name = 'Mozilla';
	  function displayName() {
	    alert(name);
	  }
	  return displayName;
	}
	var myFunc = makeFunc();
	myFunc();
	
10. function.call(thisArg, arg1, arg2, ...):
thisArg:
	Optional. The value of this provided for the call to a function. Note that this may not be the actual value seen by the method: 
	if the method is a function in non-strict mode , null and undefined will be replaced with the global object and primitive values
	will be converted to objects.
arg1, arg2, ...:
	Optional. Arguments for the function.
Return value:
	The result of calling the function with the specified this value and arguments.

11. function.apply(thisArg, [argsArray])
thisArg:
	Optional. The value of this provided for the call to func. Note that this may not be the actual value seen by the method: 
	if the method is a function in non-strict mode code, null and undefined will be replaced with the global object, and primitive 
	values will be boxed.
argsArray:
	Optional. An array-like object, specifying the arguments with which func should be called, or null or undefined if no arguments 
	should be provided to the function. Starting with ECMAScript 5 these arguments can be a generic array-like object instead of an 
	array. See below for browser compatibility information.
Return value:
	The result of calling the function with the specified this value and arguments.
	
12. apply() vs call():
	apply is very similar to call(), except for the type of arguments it supports.
	You use an arguments array instead of a list of arguments (parameters). 
	With apply, you can also use an array literal, for example, func.apply(this, ['eat', 'bananas']), 
	or an Array object, for example, func.apply(this, new Array('eat', 'bananas')).
	
13. bind():
	var module = {
	  x: 42,
	  getX: function() {
	    return this.x;
	  }
	}

	var unboundGetX = module.getX;
	console.log(unboundGetX()); // The function gets invoked at the global scope
	// expected output: undefined

	var boundGetX = unboundGetX.bind(module);
	console.log(boundGetX());
	// expected output: 42

